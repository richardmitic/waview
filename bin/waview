#!/usr/bin/env python3

import logging
import sys
import asyncio
import argparse
from waview.waview_async import WaviewApp, LoggerWriter

LOG = logging.getLogger(__name__)

def _get_arg_parser():
    parser = argparse.ArgumentParser(description='View WAV files in the terminal')
    parser.add_argument('-w', '--wav', type=str, default=None,
                        help='WAV file to view')
    parser.add_argument('-y', '--yscale', type=float, default=1.,
                        help='Initial Y value scale')
    parser.add_argument('-c', '--centroid', type=float, default=0.5,
                        help='Initial centroid')
    parser.add_argument('-r', '--range', type=float, default=1.,
                        help='Initial range to view (default is the entire file)')
    parser.add_argument('-n', '--channels', type=int, default=1,
                        help='Number of channels when reading raw PCM')
    parser.add_argument('--deltazoom', type=float, default=0.2,
                        help='How much to zoom in and out with each key press')
    parser.add_argument('--deltashift', type=float, default=0.2,
                        help='How much to shift left and right with each key press')
    return parser

def main(wav, yscale, centroid, range, deltashift, deltazoom, channels):
    logging.basicConfig(level=logging.DEBUG,
                        filename="./waview.log",
                        format='%(asctime)s.%(msecs)03d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s',
                        datefmt='%Y%m%d-%H%M%S')
    sys.stdout = LoggerWriter(LOG.debug)
    sys.stderr = LoggerWriter(LOG.error)

    loop = asyncio.get_event_loop()
    app = WaviewApp(
        wav=wav,
        yscale=yscale,
        centroid=centroid,
        range=range,
        channels=channels,
        deltashift=deltashift,
        deltazoom=deltazoom)

    try:
        tasks = asyncio.gather(
            app.async_wrapper()
        )
        results = loop.run_until_complete(tasks)
        LOG.info(results)
    finally:
        loop.close()

if __name__ == '__main__':
    args = _get_arg_parser().parse_args()
    main(**vars(args))
